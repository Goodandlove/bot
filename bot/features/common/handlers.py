# bot/features/common/handlers.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.core.redis_manager import RedisManager
from bot.core.states import States
from bot.presentation.keyboards.common import main_menu, help_menu
from bot.features.cabinet.handlers import show_favorites
from bot.features.cabinet.handlers import show_cabinet, show_favorites 

import asyncio
from bot.core.redis_manager import RedisManager
from bot.data.repositories.user import is_user_blocked, get_agent_by_telegram_id

logger = logging.getLogger(__name__)
redis_manager = RedisManager() 


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if context.user_data.get('is_agent'):
        welcome = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {context.user_data['agent_name']}!"
    else:
        welcome = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "üèñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ!*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- üîç –ò—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "- ‚ù§ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
        "- üíº –†–∞–∑–º–µ—â–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–±–æ—Ä\n\n"
        "- üì¢ –†–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
        "- üîÑ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏."
    )
    
    await update.message.reply_text(welcome)
    await update.message.reply_text(welcome_text, reply_markup=main_menu(), parse_mode='Markdown')
    RedisManager().set_state(user.id, States.MAIN_MENU)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üèñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "üîç *–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:*\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞\n"
        "- –ü–æ—à–∞–≥–æ–≤–æ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–º–Ω–∞—Ç—ã, —Ü–µ–Ω–∞, —ç—Ç–∞–∂\n\n"
        "üÜï *–ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã:*\n"
        "- /new - –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–ª–∏ 3 –¥–Ω—è\n\n"

        "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:*\n"
        "- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–∫–æ–π '‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ /favorites\n\n"        
        "üíº *–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç:*\n"
        "- –†–∞–∑–º–µ—â–∞–π—Ç–µ –≤–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã\n\n"
        "- –†–∞–∑–º–µ—â–∞–π—Ç–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–±–æ—Ä–∫—É –æ–±—ä–µ–∫—Ç–æ–≤\n\n"        
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ /requests\n\n"
        "‚öô *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        "- /settings - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"        
        "üîÑ /reset - —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫\n"
        "üè† /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )
    await update.message.reply_text(help_text, reply_markup=help_menu(), parse_mode='Markdown')
    RedisManager().set_state(update.effective_user.id, States.HELP_MENU)

 

async def handle_global_commands(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    user = update.effective_user
    message = update.message.text

    if message == "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await show_favorites(update, context)
        return True
    
    if message == "üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç":
        await show_cabinet(update, context)
        return True
    
    if message == "‚Ñπ –ü–æ–º–æ—â—å":
        await help_command(update, context)
        RedisManager().set_state(user.id, States.HELP_MENU)
        return True
    
    if message == "üè† –ì–ª–∞–≤–Ω–∞—è":
        await start(update, context)
        RedisManager().set_state(user.id, States.MAIN_MENU)
        return True
    
    if message == "üîç –ü–æ–∏—Å–∫":
        from bot.features.search.handlers.start import start_search
        await start_search(update, context)
        return True
    
    return False



async def debug_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user = update.effective_user
    if not user:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = redis_manager.get_search_data_all(user.id)
    db_data = {
        'is_blocked': await asyncio.to_thread(is_user_blocked, user.id),
        'agent_info': await asyncio.to_thread(get_agent_by_telegram_id, user.id)
    }
    
    text = (
        f"üõ† *Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        f"ID: `{user.id}`\n"
        f"Redis –¥–∞–Ω–Ω—ã–µ:\n`{session_data}`\n\n"
        f"DB —Å—Ç–∞—Ç—É—Å:\n`{db_data}`"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def check_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    user = update.effective_user
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        return
    
    is_blocked = await asyncio.to_thread(is_user_blocked, user.id)
    status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è {user.full_name} (ID: {user.id}): {status}"
    ) 