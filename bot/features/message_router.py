# bot/features/message_router.py

import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from bot.core.middlewares import identify_user
from bot.features.common.handlers import handle_global_commands
from bot.features.search.handlers.results import show_next_properties
from bot.features.search.handlers import (
    handle_room_selection,
    handle_price_selection,
    handle_price_input,
    handle_floor_selection
)
from bot.core.states import States
from bot.core.redis_manager import RedisManager
from bot.features.common.handlers import start  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ start

from bot.presentation.keyboards.search import room_selection, price_selection


logger = logging.getLogger(__name__)

async def route_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    
    if await identify_user(update, context):
        return

    user = update.effective_user
    message = update.message.text
    state = RedisManager().get_state(user.id)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, —Ç–µ–∫—Å—Ç='{message}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if await handle_global_commands(update, context):
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if message == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ":
        redis_manager = RedisManager()
        current_index = redis_manager.get_search_index(user.id)
        results = redis_manager.get_search_results(user.id)
        
        if current_index < len(results):
            await show_next_properties(update, context, current_index, results)
        else:
            await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return
    
    elif message == "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫":
        redis_manager = RedisManager()
        redis_manager.clear_search_session(user.id)
        redis_manager.set_state(user.id, States.SEARCH_ROOMS)
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
            reply_markup=room_selection()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞
    if state == States.SEARCH_ROOMS:
        if message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            await start(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é start
            RedisManager().set_state(user.id, States.MAIN_MENU)
        else:
            await handle_room_selection(update, context)
        return
    
    elif state == States.SEARCH_PRICE:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            RedisManager().set_state(user.id, States.SEARCH_ROOMS)
            await update.message.reply_text(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
                reply_markup=room_selection()
            )
            return
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_price_selection(update, context)
        return
    
    elif state in [States.SEARCH_PRICE_MIN, States.SEARCH_PRICE_MAX, States.SEARCH_PRICE]:
        await handle_price_input(update, context)
        return
    
    elif state == States.SEARCH_FLOOR:
        if message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            RedisManager().set_state(user.id, States.SEARCH_PRICE)
            await update.message.reply_text(
                "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ:",
                reply_markup=price_selection()
            )
        else:
            await handle_floor_selection(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    if context.user_data.get('type') == 'agent':
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É: {message}")
    else:
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message}")