# bot/features/search/callbacks.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback


import json
import logging
import asyncio
from telegram import Update
from config import Config

from bot.core.redis_manager import RedisManager

from bot.features.search.services import SearchService
from bot.core.states import States
from bot.presentation.keyboards.common import main_menu
from bot.presentation.keyboards.common import pagination_keyboard
from bot.presentation.keyboards.search import details_keyboard
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
)
from bot.data.repositories.favorites import is_favorite_in_db,remove_favorite_from_db,add_favorite_to_db
from bot.data.repositories.property import get_property_by_id
from bot.presentation.keyboards.search import room_selection
from bot.presentation.cards.search import get_all_photos, format_property_card
from bot.data.repositories.property import get_property_by_id

logger = logging.getLogger(__name__)
redis_manager = RedisManager()

async def handle_show_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_json = redis_manager.get_search_data(user.id, 'search_results')
    current_index = int(redis_manager.get_search_data(user.id, 'search_index') or 0)
    
    if not results_json:
        await query.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        return
    
    results = json.loads(results_json)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await query.message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é
    pagination_info = await SearchService.show_results_batch(update, context, results, current_index)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if pagination_info["end_index"] < pagination_info["total_results"]:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–ü–æ–∫–∞–∑–∞–Ω–æ {pagination_info['end_index']} –∏–∑ {pagination_info['total_results']} –æ–±—ä–µ–∫—Ç–æ–≤",
            reply_markup=pagination_keyboard(pagination_info['end_index'], pagination_info['total_results'])
        )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üè† –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu()
        )
        redis_manager.set_state(user.id, States.MAIN_MENU)

async def handle_back_to_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_json = redis_manager.get_search_data(user.id, 'search_results')
    current_index = int(redis_manager.get_search_data(user.id, 'search_index') or 0)
    
    if not results_json:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
        )
        return
    
    results = json.loads(results_json)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await query.message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é
    await SearchService.show_results_batch(update, context, results, current_index)

def register_callbacks(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    application.add_handler(CallbackQueryHandler(handle_show_more, pattern="^show_more$"))
    application.add_handler(CallbackQueryHandler(handle_back_to_search, pattern="^back_to_search$"))



async def handle_show_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ'"""

    
    query = update.callback_query
    await query.answer()
    property_id = query.data.split('_')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
    property_data = await asyncio.to_thread(
        get_property_by_id, 
        property_id
    )
    
    if not property_data:
        await query.message.reply_text("‚ö†Ô∏è –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    all_photos = get_all_photos(property_data)
    chat_id = query.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫–∞–∑–∞
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üñº –ó–∞–≥—Ä—É–∂–∞—é {len(all_photos)} —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {property_id}..."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º, –Ω–æ —Ç–∞–∫ –Ω–∞–¥–µ–∂–Ω–µ–µ)
    for photo_url in all_photos:
        try:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo_url
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo_url}: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –æ–±—ä–µ–∫—Ç–∞
    card = format_property_card(property_data, context.user_data, detailed=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad_number = f"{property_data['id']}{Config.CITY_CODE}{property_data['type']}"
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üèÅ –í—Å–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ `{ad_number}` –ø–æ–∫–∞–∑–∞–Ω—ã\n\n{card['text']}",
        reply_markup=card['keyboard'],
        parse_mode='Markdown'
    )


async def handle_add_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    property_id = query.data.split('_')[1]
    user = query.from_user
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î
    property_data = await asyncio.to_thread(get_property_by_id, property_id)
    
    if not property_data:
        await query.message.reply_text("‚ö†Ô∏è –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if await is_favorite_in_db(user.id, property_id):
        await remove_favorite_from_db(user.id, property_id)
        action = "—É–¥–∞–ª–µ–Ω –∏–∑"
        icon = "ü§ç"
    else:
        await add_favorite_to_db(user.id, property_id)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"
        icon = "‚ù§Ô∏è"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=user.id,
        text=f"{icon} –û–±—ä–µ–∫—Ç {property_id} {action} –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–ë–ù–û–í–õ–ï–ù–ù–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
    card = format_property_card(property_data, context.user_data)
    new_keyboard = details_keyboard(property_data, user.id)
    
    try:
        if card['photos']:
            await context.bot.send_photo(
                chat_id=user.id,
                photo=card['photos'][0],
                caption=card['text'],
                reply_markup=new_keyboard,
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=user.id,
                text=card['text'],
                reply_markup=new_keyboard,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: {str(e)}")
 
# bot/features/search/callbacks.py (–¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)

async def handle_new_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫'"""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    RedisManager().conn.hdel(f'user:{user.id}:session', 'search_results')
    RedisManager().conn.hdel(f'user:{user.id}:session', 'search_index')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    RedisManager().set_state(user.id, States.SEARCH_ROOMS.value)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    
    await query.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=room_selection()
    )

# –û–±–Ω–æ–≤–ª—è–µ–º register_callbacks
def register_callbacks(application: Application):
    application.add_handler(CallbackQueryHandler(handle_show_more, pattern="^show_more$"))
    application.add_handler(CallbackQueryHandler(handle_back_to_search, pattern="^back_to_search$"))
    application.add_handler(CallbackQueryHandler(handle_show_details, pattern=r"^details_"))
    application.add_handler(CallbackQueryHandler(handle_add_favorite, pattern=r"^fav_"))
    application.add_handler(CallbackQueryHandler(handle_new_search, pattern="^new_search$"))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    application.add_handler(CallbackQueryHandler(
        new_search_callback, 
        pattern="^new_search$"
    ))
    
    application.add_handler(CallbackQueryHandler(
        show_more_callback, 
        pattern="^show_more$"
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫" 
async def new_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    redis_manager = RedisManager()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    redis_manager.clear_search_session(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    redis_manager.set_state(user_id, States.SEARCH_ROOMS)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await query.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=room_selection()
    )

async def show_more_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    redis_manager = RedisManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    current_index = redis_manager.get_search_index(user_id)
    results = redis_manager.get_search_results(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
    # await show_next_properties(update, context, current_index, results)


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:
async def favorite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    property_id = int(query.data.split('_')[1])
    redis_manager = RedisManager()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    is_favorite = redis_manager.is_favorite_in_cache(user_id, property_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
    property_data = get_property_by_id(property_id)
    if property_data:
        ad_number = f"{property_id}{Config.CITY_CODE}{property_data['type']}"
        

    if is_favorite:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        success = redis_manager.remove_favorite(user_id, property_id)
        if success:
            redis_manager.remove_favorite_from_cache(user_id, property_id)
            # await query.answer("ü§ç –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
            await query.answer(f"ü§ç –û–±—ä–µ–∫—Ç {ad_number} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {ad_number} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

 
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        success = redis_manager.add_favorite(user_id, property_id)
        if success:
            redis_manager.add_favorite_to_cache(user_id, property_id)
            # await query.answer("‚ù§Ô∏è –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            await query.answer(f"‚ù§Ô∏è –û–±—ä–µ–∫—Ç {ad_number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {ad_number} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    


    # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    property_data = get_property_by_id(property_id)
    if property_data:
        card = format_property_card(property_data, context.user_data)
        try:
            await query.message.edit_reply_markup(reply_markup=card["keyboard"])
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await query.message.reply_photo(
                photo=card["photos"][0] if card["photos"] else None,
                caption=card["text"],
                reply_markup=card["keyboard"],
                parse_mode="Markdown"
            )