# bot/features/search/handlers.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π


import json
import asyncio
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardRemove
from bot.features.search.services import SearchService
from bot.presentation.keyboards.search import (
    room_selection,
    price_selection,
    floor_selection,
    price_input_keyboard 
)
from bot.presentation.keyboards.common import pagination_keyboard

from bot.utils.input import parse_price_input
from bot.core.redis_manager import RedisManager
from bot.core.states import States
from bot.data.repositories.user import log_user_action
from bot.presentation.keyboards.common import main_menu

logger = logging.getLogger(__name__)

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
    user = update.effective_user
    if await SearchService.start_search(user):
        await update.message.reply_text(
            "üè† *–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n"
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
            reply_markup=room_selection(),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )

async def handle_room_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç"""
    user = update.effective_user
    room_choice = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    valid_choices = ['1', '2', '3', '4+', '–°—Ç—É–¥–∏—è']
    if room_choice not in valid_choices:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–º–Ω–∞—Ç",
            reply_markup=room_selection()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç
    RedisManager().set_search_data(user.id, 'rooms', room_choice)
    RedisManager().set_state(user.id, States.SEARCH_PRICE)
    log_user_action(user.id, user.full_name, f"–í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç: {room_choice}")
    
    await update.message.reply_text(
        "üî¢ *–≠—Ç–∞–ø 2: –¶–µ–Ω–∞ (–≤ —Ç—ã—Å—è—á–∞—Ö —Ä—É–±–ª–µ–π)*\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞\n",
        reply_markup=price_selection(),
        parse_mode='Markdown'
    )

async def handle_price_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
    user = update.effective_user
    choice = update.message.text
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    RedisManager().conn.hdel(f'user:{user.id}:session', 'price_min')
    RedisManager().conn.hdel(f'user:{user.id}:session', 'price_max')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    if choice == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await update.message.reply_text(
            "üè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:",
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫
    if choice == '–æ—Ç - –¥–æ':
        await update.message.reply_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "- –û–¥–Ω–æ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (=—Ü–µ–Ω–∞)\n"
            "- –î–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–¥–µ—Ñ–∏—Å –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
            "–ü—Ä–∏–º–µ—Ä—ã: *5000*, *=5000*, *5000-7500*, *5000 7500*",
            reply_markup=price_input_keyboard(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE)
        return 
    
    if choice == '—Ü–µ–Ω–∞ –æ—Ç':
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)",
            reply_markup=price_input_keyboard()
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE_MIN)
        return
    
    if choice == '—Ü–µ–Ω–∞ –¥–æ':
        await update.message.reply_text(
            "üíµ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)",
            reply_markup=price_input_keyboard()
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE_MAX)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        reply_markup=price_selection()
    )

async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω"""
    user = update.effective_user
    message = update.message.text
    state = RedisManager().get_state(user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if message == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        RedisManager().conn.hdel(f'user:{user.id}:session', 'price_min')
        RedisManager().conn.hdel(f'user:{user.id}:session', 'price_max')
        await update.message.reply_text(
            "üè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:",
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
    if message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        RedisManager().set_state(user.id, States.SEARCH_PRICE)
        await update.message.reply_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ:",
            reply_markup=price_selection()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–≤–æ–¥–∞
    input_type = "range"
    if state == States.SEARCH_PRICE_MIN:
        input_type = "min"
    elif state == States.SEARCH_PRICE_MAX:
        input_type = "max"
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    prices = parse_price_input(message, input_type)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if prices["min"] is not None and prices["max"] is not None and prices["min"] == prices["max"]:
        response_text = f"‚úÖ –¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
        RedisManager().set_search_data(user.id, 'price_exact', prices["min"])
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if prices["min"] is not None:
            RedisManager().set_search_data(user.id, 'price_min', prices["min"])
        if prices["max"] is not None:
            RedisManager().set_search_data(user.id, 'price_max', prices["max"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ""
        if state == States.SEARCH_PRICE_MIN and prices["min"] is not None:
            response_text = f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
        elif state == States.SEARCH_PRICE_MAX and prices["max"] is not None:
            response_text = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['max']} —Ç—ã—Å. —Ä—É–±."
        elif state == States.SEARCH_PRICE:
            if prices["min"] is not None and prices["max"] is not None:
                response_text = f"‚úÖ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {prices['min']}-{prices['max']} —Ç—ã—Å. —Ä—É–±."
            elif prices["min"] is not None:
                response_text = f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
            elif prices["max"] is not None:
                response_text = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['max']} —Ç—ã—Å. —Ä—É–±."
    
    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–∞
    if response_text:
        response_text += "\n\nüè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:"
        await update.message.reply_text(
            response_text,
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if state == States.SEARCH_PRICE_MIN:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)"
        elif state == States.SEARCH_PRICE_MAX:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)"
        else:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 7500)"
        
        await update.message.reply_text(
            error_msg,
            reply_markup=price_input_keyboard()
        )

async def handle_floor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —ç—Ç–∞–∂—É"""
    user = update.effective_user
    floor_choice = update.message.text
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞
    await update.message.reply_text(
        "üîç –ò—â—É –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    if floor_choice == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
        RedisManager().conn.hdel(f'user:{user.id}:session', 'floor')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    criteria = RedisManager().get_search_data_all(user.id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = await SearchService.perform_search(user, criteria)
    
    if not results:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
            reply_markup=main_menu(),
            parse_mode='Markdown'
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        SearchService.save_search_results(user, results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
        pagination_info = await SearchService.show_results_batch(update, context, results, 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if pagination_info["end_index"] < pagination_info["total_results"]:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ü–æ–∫–∞–∑–∞–Ω–æ {pagination_info['end_index']} –∏–∑ {pagination_info['total_results']} –æ–±—ä–µ–∫—Ç–æ–≤",
                reply_markup=pagination_keyboard(pagination_info['end_index'], pagination_info['total_results'])
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üè† –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=main_menu()
            )
            RedisManager().set_state(user.id, States.MAIN_MENU)