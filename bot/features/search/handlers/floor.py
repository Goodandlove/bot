# bot\features\search\handlers\floor.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardRemove
from bot.core.redis_manager import RedisManager
from bot.core.states import States
from bot.features.search.services import SearchService 
from bot.presentation.keyboards.common import pagination_keyboard, main_menu

logger = logging.getLogger(__name__)

async def handle_floor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —ç—Ç–∞–∂—É"""
    user = update.effective_user
    floor_choice = update.message.text
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞
    await update.message.reply_text(
        "üîç –ò—â—É –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    if floor_choice == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
        RedisManager().conn.hdel(f'user:{user.id}:session', 'floor')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    criteria = RedisManager().get_search_data_all(user.id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = await SearchService.perform_search(user, criteria)
    
    if not results:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
            reply_markup=main_menu(),
            parse_mode='Markdown'
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        SearchService.save_search_results(user, results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
        pagination_info = await SearchService.show_results_batch(update, context, results, 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if pagination_info["end_index"] < pagination_info["total_results"]:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ü–æ–∫–∞–∑–∞–Ω–æ {pagination_info['end_index']} –∏–∑ {pagination_info['total_results']} –æ–±—ä–µ–∫—Ç–æ–≤",
                reply_markup=pagination_keyboard(pagination_info['end_index'], pagination_info['total_results'])
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üè† –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=main_menu()
            )
            RedisManager().set_state(user.id, States.MAIN_MENU)