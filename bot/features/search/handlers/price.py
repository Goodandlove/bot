# bot\features\search\handlers\price.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.core.redis_manager import RedisManager
from bot.core.states import States
from bot.presentation.keyboards.search import (
    price_selection,
    price_input_keyboard,
    floor_selection
)
from bot.utils.input import parse_price_input

logger = logging.getLogger(__name__)

async def handle_price_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
    user = update.effective_user
    choice = update.message.text
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    RedisManager().conn.hdel(f'user:{user.id}:session', 'price_min')
    RedisManager().conn.hdel(f'user:{user.id}:session', 'price_max')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    if choice == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await update.message.reply_text(
            "üè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:",
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫
    if choice == '–æ—Ç - –¥–æ':
        await update.message.reply_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "- –û–¥–Ω–æ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (=—Ü–µ–Ω–∞)\n"
            "- –î–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–¥–µ—Ñ–∏—Å –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
            "–ü—Ä–∏–º–µ—Ä—ã: *5000*, *=5000*, *5000-7500*, *5000 7500*",
            reply_markup=price_input_keyboard(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE)
        return 
    
    if choice == '—Ü–µ–Ω–∞ –æ—Ç':
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)",
            reply_markup=price_input_keyboard()
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE_MIN)
        return
    
    if choice == '—Ü–µ–Ω–∞ –¥–æ':
        await update.message.reply_text(
            "üíµ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)",
            reply_markup=price_input_keyboard()
        )
        RedisManager().set_state(user.id, States.SEARCH_PRICE_MAX)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        reply_markup=price_selection()
    )

async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω"""
    user = update.effective_user
    message = update.message.text
    state = RedisManager().get_state(user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if message == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        RedisManager().conn.hdel(f'user:{user.id}:session', 'price_min')
        RedisManager().conn.hdel(f'user:{user.id}:session', 'price_max')
        await update.message.reply_text(
            "üè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:",
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
    if message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        RedisManager().set_state(user.id, States.SEARCH_PRICE)
        await update.message.reply_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ:",
            reply_markup=price_selection()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–≤–æ–¥–∞
    input_type = "range"
    if state == States.SEARCH_PRICE_MIN:
        input_type = "min"
    elif state == States.SEARCH_PRICE_MAX:
        input_type = "max"
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    prices = parse_price_input(message, input_type)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if prices["min"] is not None and prices["max"] is not None and prices["min"] == prices["max"]:
        response_text = f"‚úÖ –¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
        RedisManager().set_search_data(user.id, 'price_exact', prices["min"])
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if prices["min"] is not None:
            RedisManager().set_search_data(user.id, 'price_min', prices["min"])
        if prices["max"] is not None:
            RedisManager().set_search_data(user.id, 'price_max', prices["max"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ""
        if state == States.SEARCH_PRICE_MIN and prices["min"] is not None:
            response_text = f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
        elif state == States.SEARCH_PRICE_MAX and prices["max"] is not None:
            response_text = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['max']} —Ç—ã—Å. —Ä—É–±."
        elif state == States.SEARCH_PRICE:
            if prices["min"] is not None and prices["max"] is not None:
                response_text = f"‚úÖ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {prices['min']}-{prices['max']} —Ç—ã—Å. —Ä—É–±."
            elif prices["min"] is not None:
                response_text = f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['min']} —Ç—ã—Å. —Ä—É–±."
            elif prices["max"] is not None:
                response_text = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {prices['max']} —Ç—ã—Å. —Ä—É–±."
    
    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–∞
    if response_text:
        response_text += "\n\nüè¢ *–≠—Ç–∞–ø 3: –≠—Ç–∞–∂*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂—É:"
        await update.message.reply_text(
            response_text,
            reply_markup=floor_selection(),
            parse_mode='Markdown'
        )
        RedisManager().set_state(user.id, States.SEARCH_FLOOR)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if state == States.SEARCH_PRICE_MIN:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)"
        elif state == States.SEARCH_PRICE_MAX:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)"
        else:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 7500)"
        
        await update.message.reply_text(
            error_msg,
            reply_markup=price_input_keyboard()
        )