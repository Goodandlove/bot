# bot/features/search/services.py
# –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)



import json
import asyncio
import logging
from bot.core.redis_manager import RedisManager
from bot.data.repositories.search import search_properties
from bot.presentation.cards.search import format_property_card
from bot.core.states import States
from config import Config

redis_manager = RedisManager() 

logger = logging.getLogger(__name__)
BATCH_SIZE = Config.MAX_RESULTS_PER_PAGE

class SearchService:
    @staticmethod
    async def start_search(user):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            redis_manager.clear_session(user.id)
            redis_manager.set_state(user.id, States.SEARCH_ROOMS.value)
            logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞: {str(e)}")
            return False

    @staticmethod
    async def perform_search(user, criteria):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤
        log_criteria = ", ".join([f"{k}: {v}" for k, v in criteria.items()])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –ë–î
        return await asyncio.to_thread(search_properties, criteria)

    @staticmethod
    def save_search_results(user, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ Redis"""
        redis_manager.set_search_data(user.id, 'search_results', json.dumps(results))
        redis_manager.set_search_data(user.id, 'search_index', 0)

    @staticmethod
    async def show_results_batch(update, context, results, start_index):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        user = update.effective_user
        end_index = min(start_index + BATCH_SIZE, len(results))
        batch = results[start_index:end_index]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
        chat_id = update.effective_chat.id
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        total = len(results)
        shown = end_index
        
        if start_index == 0:
            message_text = (
                f"üèÜ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: *{total}*\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ: *{shown}*"
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode='Markdown'
            )
         
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        for prop in batch:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_property_type'] = prop['type'] 
            card = format_property_card(prop, context.user_data)
            
            if card['photos']:
                try:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=card['photos'][0],
                        caption=card['text'],
                        reply_markup=card['keyboard'],
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"{card['text']}\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        reply_markup=card['keyboard'],
                        parse_mode='Markdown'
                    )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=card['text'],
                    reply_markup=card['keyboard'],
                    parse_mode='Markdown'
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ Redis
        redis_manager.set_search_data(user.id, 'search_index', end_index)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        return {
            "end_index": end_index,
            "total_results": len(results)
        }