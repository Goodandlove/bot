# bot/presentation/cards/search.py
# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–∫–∞—Ä—Ç–æ—á–∫–∏)

from bot.presentation.keyboards.search import details_keyboard

import logging
from bot.core.utils import format_price, format_date
from config import Config
from bot.core.utils import format_object_number

logger = logging.getLogger(__name__)

FLAT_TYPES = {
    "1": "–°—Ç—É–¥–∏—è",
    "2": "–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
    "3": "–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
    "4": "–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
    "5": "–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
    "6": "–ú–Ω–æ–≥–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è"
}

PATH_PREFIXES = {
    "1": "studiya",
    "2": "odnokomnatnaya_kvartira",
    "3": "dvuchkomnatnaya_kvartira",
    "4": "trechkomnatnaya_kvartira",
    "5": "chetirechkomnatnaya_kvartira",
    "6": "mnogokomnatnaya_kvartira"
}

def get_photo_path(prop_id, prop_type, photo_num=0):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞"""
    prefix = PATH_PREFIXES.get(str(prop_type), "")
    if not prefix:
        return None
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    path = f"{prefix}_v_gelendzhike/{prop_id}{Config.CITY_CODE}{prop_type}/"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if photo_num == 0:
        filename = f"{prop_id}{Config.CITY_CODE}{prop_type}_sq.jpg"
    else:
        filename = f"{prop_id}{Config.CITY_CODE}{prop_type}_{photo_num}.jpg"
    
    return f"{Config.PHOTO_BASE_URL}{path}{filename}"
 
def get_additional_photos(property_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–µ–≤—å—é)"""
    prop_id = property_data['id']
    prop_type = property_data['type']
    photos = []
    photo_cnt = property_data.get('photocnt', 0)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è 'photo' –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
    if 'photo' not in property_data or not property_data['photo']:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ –æ—Ç 1 –¥–æ photocnt
        for num in range(1, photo_cnt):
            photo_url = get_photo_path(prop_id, prop_type, num)
            if photo_url:
                photos.append(photo_url)
        return photos
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "0,1,2,4" –≤ —Å–ø–∏—Å–æ–∫ [1,2,4] (–∏—Å–∫–ª—é—á–∞—è 0)
        photo_numbers = [
            int(num.strip()) 
            for num in property_data['photo'].split(',') 
            if num.strip() and int(num.strip()) != 0
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        for num in photo_numbers:
            photo_url = get_photo_path(prop_id, prop_type, num)
            if photo_url:
                photos.append(photo_url)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ: {str(e)}")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ photocnt
        for num in range(1, photo_cnt):
            photo_url = get_photo_path(prop_id, prop_type, num)
            if photo_url:
                photos.append(photo_url)
    
    return photos

def format_property_card(property_data, user_info, detailed=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    prop_id = property_data.get('id')
    prop_type = property_data.get('type')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º prop_type –≤–º–µ—Å—Ç–æ room_count 
    ad_number = format_object_number(property_data['id'], property_data['type'])

    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    flat_type = FLAT_TYPES.get(str(prop_type), "–ö–≤–∞—Ä—Ç–∏—Ä–∞")
    street = property_data.get('street', '')
    home = property_data.get('home', '')
    flat = property_data.get('flat', '')
    price = property_data.get('price', 0)
    pricem = property_data.get('pricem', 0)
    space = property_data.get('space', 0)
    floor = property_data.get('floor', 0)
    floors_total = property_data.get('floors_total', 0)
    photo_cnt = property_data.get('photocnt', 0)
    created = format_date(property_data.get('creation_date', ''))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    address = f"{street}, –¥. {home}"
    if flat:
        address += f", –∫–≤. {flat}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    is_agent = user_info.get('type') == 'agent'
    has_access = False
    
    if is_agent:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
        agent_types = user_info.get('types', '')
        if agent_types and str(prop_type) in agent_types.split(','):
            has_access = True
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    if is_agent and has_access:
        # –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º
        space_text = f"{space} –∫–≤.–º" if space > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        pricem_text = f" ({pricem:.1f} —Ç.—Ä./–∫–≤.–º)" if space > 0 and pricem > 0 else ""
        
        text = (
            f"üè† *{flat_type} –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ*\n"
            f"üìç {address}\n\n"
            f"üìè *–ü–ª–æ—â–∞–¥—å:* {space_text}{pricem_text}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {format_price(price)} —Ç.—Ä.\n"
            f"üè¢ *–≠—Ç–∞–∂:* {floor}/{floors_total}\n"
            f"üñº *–§–æ—Ç–æ:* {photo_cnt} —à—Ç.\n"
            f"üïí *–î–æ–±–∞–≤–ª–µ–Ω–æ:* {created}\n"
            f"üî¢ *–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:* `{ad_number}`"
        )
    else:
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        space_text = f"{space} –∫–≤.–º" if space > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        text = (
            f"üè† *{flat_type} –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ*\n"
            f"üìç {address}\n\n"
            f"üìè *–ü–ª–æ—â–∞–¥—å:* {space_text}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {format_price(price)} —Ç.—Ä.\n"
            f"üè¢ *–≠—Ç–∞–∂:* {floor}/{floors_total}\n"
            f"üî¢ *–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:* `{ad_number}`"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photos = []
    if property_data.get('photocnt', 0) > 0:
        preview_photo = get_photo_path(property_data['id'], property_data['type'])
        if preview_photo:
            photos = [preview_photo]
    
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = user_info.get('id') if user_info else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = None
    if property_data.get('photocnt', 0) > 0 or True:  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        from bot.presentation.keyboards.search import details_keyboard
        keyboard = details_keyboard(property_data, user_id)
    
    return {
        "text": text,
        "photos": photos,
        "keyboard": keyboard
    }


def get_all_photos(property_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞"""
    prop_id = property_data['id']
    prop_type = property_data['type']
    photo_cnt = property_data.get('photocnt', 0)
    photos = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é (–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ)
    preview = get_photo_path(prop_id, prop_type)
    if preview:
        photos.append(preview)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
    additional = get_additional_photos(property_data)
    photos.extend(additional)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    return list(set(photos))[:photo_cnt]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º